{"version":3,"sources":["redux/actions.js","redux/types.js","components/Alert/Alert.js","components/PostForm/PostForm.js","components/Post/Post.js","components/Posts/Posts.js","components/Loader/Loader.js","components/FetchedPosts/FetchedPosts.js","App.js","serviceWorker.js","redux/postsReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/sagas.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","hideAlert","Alert","className","role","PostForm","props","changeInputHandler","event","persist","setState","prev","target","name","value","submitHandler","preventDefault","title","state","trim","newPost","id","Date","now","toString","createPost","onSubmit","this","alert","htmlFor","onChange","React","Component","mapDispatchToProps","post","connect","app","Post","syncPosts","posts","length","map","key","Loader","FetchedPosts","useDispatch","useSelector","fetchedPosts","loading","onClick","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","sagaWatcher","sagaWorker","filterSpam","forbidden","takeEvery","put","call","fetchPosts","a","fetch","response","json","filter","w","includes","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08b64bae.chunk.js","sourcesContent":["import {CREATE_POST, FETCH_POST, HIDE_ALERT, HIDE_LOADER, REQUESTS_POSTS, SHOW_ALERT, SHOW_LOADER} from \"./types\";\r\n\r\nexport const createPost = (post) =>  {\r\n    return {\r\n        type: CREATE_POST, payload: post\r\n    }\r\n}\r\n\r\nexport const showLoader = () => {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\n\r\nexport const hideLoader = () => {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\n\r\nexport const showAlert = (text) => {\r\n    return dispatch => {\r\n        dispatch(\r\n            {\r\n                type: SHOW_ALERT,\r\n                payload: text\r\n            }\r\n        )\r\n        setTimeout(() => {dispatch(hideAlert())}, 3000);\r\n    }\r\n}\r\n\r\nexport const hideAlert = () => {\r\n    return {\r\n        type: HIDE_ALERT\r\n    }\r\n}\r\n\r\n\r\nexport const  fetchPost = () => {\r\n    return {\r\n        type: REQUESTS_POSTS\r\n    }\r\n}\r\n","export const CREATE_POST = 'CREATE_POST';\r\nexport const SUCCESS_CREATE = 'SUCCESS_CREATE';\r\nexport const FETCH_POST = 'FETCH_POST';\r\nexport const SHOW_LOADER = 'SHOW_LOADER';\r\nexport const HIDE_LOADER = 'HIDE_LOADER';\r\nexport const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\nexport const REQUESTS_POSTS = 'REQUESTS_POSTS';\r\n","import React from 'react'\r\n\r\nexport const Alert = ({text}) => (\r\n    <div className=\"alert alert-danger\" role=\"alert\">\r\n        {text}\r\n    </div>\r\n)\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {createPost, showAlert} from \"../../redux/actions\";\r\nimport {Alert} from \"../Alert/Alert\";\r\n\r\nclass PostForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    changeInputHandler = (event) => {\r\n        event.persist();\r\n        this.setState((prev) => ({...prev, ...{\r\n                [event.target.name]: event.target.value\r\n            }}))\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        const {title} = this.state;\r\n        if (!title.trim()) {\r\n            return this.props.showAlert('Пост не может быть пустым');\r\n        }\r\n        const newPost = {\r\n            title, id: Date.now().toString()\r\n        }\r\n        this.props.createPost(newPost);\r\n        this.setState({title: ''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                {this.props.alert && <Alert text={this.props.alert} />}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\">Заголовок поста</label>\r\n                    <input type=\"text\"\r\n                           className='form-control'\r\n                           id='title'\r\n                           value={this.state.title}\r\n                           onChange={this.changeInputHandler}\r\n                           name='title'\r\n                    />\r\n                    <button className='btn btn-success' type='submit'>Создать</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        alert: state.app.alert\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost,\r\n    showAlert\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm)\r\n","import React from 'react';\r\n\r\n\r\nconst Post = ({post}) => {\r\n    return (\r\n        <div className='card'>\r\n            <div className=\"card-body\">\r\n                <h5 className='card-title'>{post.title}</h5>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from \"../Post/Post\";\r\nimport {connect} from \"react-redux\";\r\n\r\n const Posts = ({syncPosts}) => {\r\n     if (!syncPosts.length) {\r\n         return <p className='text-center'> Постов пока нет</p>\r\n     }\r\n    return syncPosts.map(post => <Post post={post} key={post.id} />)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts.posts\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Posts)\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Post from \"../Post/Post\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchPost} from \"../../redux/actions\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\n\r\nconst FetchedPosts = () => {\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector(state => state.posts.fetchedPosts);\r\n    const loading = useSelector(state => state.app.loading);\r\n\r\n    if (loading) {\r\n       return <Loader />\r\n    }\r\n\r\n    if (!posts.length) {\r\n        return <button\r\n                    className='btn btn-primary'\r\n                    onClick={() => dispatch(fetchPost())}\r\n                >Загрузить</button>\r\n    }\r\n    return posts.map(post => <Post post={post} key={post.id} />)\r\n}\r\n\r\nexport default FetchedPosts;\r\n","import React from 'react';\nimport PostForm from \"./components/PostForm/PostForm\";\nimport Posts from \"./components/Posts/Posts\";\nimport FetchedPosts from \"./components/FetchedPosts/FetchedPosts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n          <div className=\"col\">\n              <PostForm />\n          </div>\n      </div>\n\n        <div className=\"row\">\n            <div className=\"col\">\n                <h2>Синхронные посты</h2>\n               <Posts />\n            </div>\n            <div className=\"col\">\n                <h2>Асинхронные посты</h2>\n                <FetchedPosts />\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CREATE_POST, FETCH_POST, SUCCESS_CREATE} from \"./types\";\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    fetchedPosts: []\r\n}\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SUCCESS_CREATE: {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, action.payload]\r\n            }\r\n        }\r\n\r\n        case FETCH_POST: {\r\n            return {...state, fetchedPosts: action.payload}\r\n        }\r\n    }\r\n\r\n    return state\r\n}\r\n","import {HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER} from \"./types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    alert: null\r\n}\r\n\r\nexport const appReducer = (state= initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SHOW_LOADER: {\r\n            return {...state, loading: true}\r\n        }\r\n\r\n        case HIDE_LOADER: {\r\n            return {...state, loading: false}\r\n        }\r\n\r\n        case SHOW_ALERT: {\r\n            return {...state, alert: action.payload}\r\n        }\r\n\r\n        case HIDE_ALERT: {\r\n            return {...state, alert: null}\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {postsReducer} from \"./postsReducer\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n    app: appReducer\r\n})\r\n","import {takeEvery, put, call} from 'redux-saga/effects'\r\nimport {CREATE_POST, FETCH_POST, REQUESTS_POSTS, SUCCESS_CREATE} from \"./types\";\r\nimport {createPost, hideLoader, showAlert, showLoader} from \"./actions\";\r\n\r\nconst forbidden = ['fuck', 'spam', 'php'];\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUESTS_POSTS, sagaWorker)\r\n    yield takeEvery(CREATE_POST, filterSpam)\r\n}\r\n\r\nfunction* sagaWorker() {\r\n    try {\r\n        yield put(showLoader());\r\n        const payload = yield call(fetchPosts);\r\n        yield put({type: FETCH_POST, payload})\r\n        yield put(hideLoader());\r\n    } catch (e) {\r\n        yield put(showAlert('Что то пошло не так'));\r\n        yield put(hideLoader());\r\n    }\r\n}\r\n\r\nasync function fetchPosts() {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');\r\n    return await response.json();\r\n}\r\n\r\nfunction* filterSpam(action) {\r\n    const found = forbidden.filter(w => action.payload.title.includes(w));\r\n        if (found.length) {\r\n            yield put(showAlert('Вы спамер'));\r\n        } else {\r\n            yield put({type: SUCCESS_CREATE, payload: action.payload});\r\n        }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {compose, createStore, applyMiddleware} from \"redux\";\nimport {rootReducer} from \"./redux/rootReducer\";\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport {forbiddenWordsMiddleware} from \"./redux/middleware\";\nimport {sagaWatcher} from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(rootReducer, compose(\n    applyMiddleware(thunk, saga),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nsaga.run(sagaWatcher);\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n      {app}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}